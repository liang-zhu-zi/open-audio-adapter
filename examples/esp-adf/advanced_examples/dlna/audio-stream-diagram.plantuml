@startuml dlna
title DLNA
allowmixing

legend
//Ref: esp-adf/player/pipeline_http_mp3//
end legend

node "DLNA Server" as DLNAServer  {
    portout "HTTP Source" as HTTPSource
} 

node "ESP Device" as ESPDevice  {

    json "<b><color navy>Periph Set" as periph_set {
        "<i>wifi_handle" : {
            "periph_wifi" : [".ssid", ".password"]
        }
    }
    
    portin "HTTP Sink" as HTTPSink

    component "esp_audio" as esp_audio  #aliceblue {

        component HTTPStream #line:black;line.dotted;text:black [
            <b>http_stream_reader
            ....
            <i>http_stream
            ....
            <i>.type = AUDIO_STREAM_READER
            <i>.enable_playlist_parser = true
            <i>.task_prio = 12
            <i>.stack_in_ext = true
            ....
            [http]
            ....
            <i><color olive>...
        ]

        component XxxDecoder #line:black;line.dotted;text:black [
            <b>xxx_decoder
            ....
            <i>xxx_decoder
            ....
            <i>[mp3 | wav | aac | m4a | ts]
            ....
            [decoder]
            ....
            <i><color olive>...
        ]

        component rsp_filter #line:black;line.dotted;text:black [
            <b>rsp_filter
            ....
            <i>rsp_filter
            ....
            <i>.resample_rate = 48000
            ....
            [filter]
            ....
            <i><color olive>...
        ]

        component I2SStream #line:black;line.dotted;text:black [
            <b>i2s_stream_writer
            ....
            <i>i2s_stream
            ....
            <i>.type = AUDIO_STREAM_WRITER
            <i>.stack_in_ext = true
            <i>.i2s_config.sample_rate = 48000
            <i>.task_core = 1
            ....
            [i2s]
            ....
            <i><color olive>...
        ]
    }

    component HALCodec [
        <b>audio_hal_ctrl_codec
        ....
        <i>AUDIO_HAL_CODEC_MODE_DECODE
        ....
        [codec_chip]
    ]

    portout "Analog Source" as AnalogSource
} 

node "Analog Audio" as AnalogAudio  {
    portin "Analog Sink" as AnalogSink
}

HTTPSource --> HTTPSink         #line:black;line.dotted;text:black

HTTPSink    --> HTTPStream      #line:black;line.dotted;text:black
HTTPStream  --> XxxDecoder      #line:black;line.dotted;text:black
XxxDecoder  --> rsp_filter        #line:black;line.dotted;text:black
rsp_filter  --> I2SStream         #line:black;line.dotted;text:black
I2SStream   --> HALCodec         #line:black;line.dotted;text:black
HALCodec    --> AnalogSource     #line:black;line.dotted;text:black

AnalogSource --> AnalogSink     #line:black;line.dotted;text:black

@enduml
@startuml pipeline_spiffs_amr_resample
title Pipeline SPIFFS AMR Resample
allowmixing

legend
//Ref: esp-adf/cloud_services/google_translate_device//
//Ref: esp-adf/audio_processing/pipeline_resample//
//Ref: esp-adf/audio_processing/pipeline_sonic//
//Ref: esp-adf/audio_processing/pipeline_spiffs_amr_resample//
end legend

node "SPIFFS" as SPIFFS  {
    portout "SPIFFS Sink | SPIFFS Source" as SPIFFSSinkSource
}

node "ESP Device" as ESPDevice  {

    json "<b><color navy>Periph Set" as periph_set {
        "<i>spiffs_handle" : "periph_spiffs",
        "<i>button_handle" : {
            "XXX <PRESS>" : ["STOP Playback", "START [Record]"],
            "XXX <RELEASE | LONG_RELEASE>" : ["STOP [Record]", "START Playback"],
            "MODE" : "exit"
        },
        "<i>touch_periph" : "periph_touch"
    }
    
    portin "SPIFFS Source | SPIFFS Sink" as EspSPIFFSSinkSource

    component "Pipeline Play" as pipeline_play {

        component spiffs_reader_el [
            <b>spiffs_reader_el
            ....
            spiffs_stream
            ....
            <i>.type = AUDIO_STREAM_READER
            <i>_setinfo(..., 8k, 1ch, 16bits, ...)
            <i>_set_uri(..., "/spiffs/rec.amr")
            ....
            [file_reader]
            ....
            <i><color olive>...
        ]

        component amr_decoder_el [
            <b>amr_decoder_el
            ....
            <i>amr_decoder
            ....
            ...
            ....
            [amr_decoder]
            ....
            <i><color olive>...
        ]
        
        component filter_upsample_el [
            <b>filter_upsample_el
            ....
            <i>rsp_filter
            ....
            <i>.src_rate = 8k
            <i>.src_ch = 1ch
            <i>.src_bits = 16bits
            <i>.dest_rate = 48k
            <i>.dest_ch = 2ch
            <i>.dest_bits = 16bits
            <i>.mode = RESAMPLE_DECODE_MODE
            <i>.complexity = 0
            ....
            [filter_upsample]
            ....
            <i><color olive>...
        ]        

        component i2s_writer_el [
            <b>i2s_writer_el
            ....
            <i>i2s_stream
            ....
            <i>.type = AUDIO_STREAM_WRITER
            <i>.i2s_config.channel_format = I2S_CHANNEL_FMT_ONLY_LEFT
            <i>_set_clk(..., 48k, 1ch, 16bits,...)
            ....
            [i2s_writer]
            ....
            <i><color olive>...
        ]
    }

    component "Pipeline Record" as pipeline_rec {

        component spiffs_writer_el [
            <b>spiffs_writer_el
            ....
            spiffs_stream
            ....
            <i>.type = AUDIO_STREAM_WRITER
            <i>_setinfo(..., 8k, 1ch, 16bits, ...)
            <i>_set_uri(..., "/spiffs/rec.amr")
            ....
            [file_writer]
            ....
            <i><color olive>...
        ]
        
        component amrnb_encoder_el [
            <b>amrnb_encoder_el
            ....
            <i>amrnb_encoder
            ....
            <i>...
            ....
            [amrnb_encoder]
            ....
            <i><color olive>...
        ]
        
        component filter_downsample_el [
            <b>filter_downsample_el
            ....
            <i>rsp_filter
            ....
            <i>.src_rate = 48k
            <i>.src_ch = 2ch
            <i>.src_bits = 16bits
            <i>.dest_rate = 8k
            <i>.dest_ch = 1ch
            <i>.dest_bits = 16bits
            <i>.mode = RESAMPLE_ENCODE_MODE
            <i>.complexity = 0
            ....
            [filter_downsample]
            ....
            <i><color olive>...
        ]

        component i2s_reader_el [
            <b>i2s_reader_el
            ....
            <i>i2s_stream
            ....
            <i>.type = AUDIO_STREAM_READER
            <i>_setinfo(..., 48k, 2ch, 16bits, ...)
            ....
            [i2s_reader]
            ....
            <i><color olive>...
        ]
    }

    component HALCodec [
        <b>audio_hal_ctrl_codec
        ....
        <i>AUDIO_HAL_CODEC_MODE_BOTH
        ....
        [codec_chip]
    ]

    portout "Analog Source | Analog Sink" as AnalogSourceSink
} 

node "Analog Audio" as AnalogAudio  {
    portin "Analog Sink | Analog Source" as AnalogSinkSource
}


SPIFFSSinkSource   <-- EspSPIFFSSinkSource  #line:red;line.dotted;text:red  : Save

EspSPIFFSSinkSource  <-- spiffs_writer_el   #line:red;line.dotted;text:red
spiffs_writer_el <-- amrnb_encoder_el       #line:red;line.bold;text:red
amrnb_encoder_el  <-- filter_downsample_el  #line:red;line.bold;text:red
filter_downsample_el <-- i2s_reader_el      #line:red;line.bold;text:red
i2s_reader_el        <-- HALCodec           #line:red;line.dotted;text:red
HALCodec        <-- AnalogSourceSink        #line:red;line.dotted;text:red

AnalogSourceSink <-- AnalogSinkSource       #line:red;line.dotted;text:red  : Mic




SPIFFSSinkSource --> EspSPIFFSSinkSource    #line:black;line.dotted;text:black : Read

EspSPIFFSSinkSource  --> spiffs_reader_el   #line:black;line.dotted;text:black
spiffs_reader_el --> amr_decoder_el         #line:black;line.bold;text:black
amr_decoder_el   --> filter_upsample_el     #line:black;line.bold;text:black
filter_upsample_el --> i2s_writer_el        #line:black;line.bold;text:black
i2s_writer_el   --> HALCodec                #line:black;line.dotted;text:black
HALCodec        --> AnalogSourceSink        #line:black;line.dotted;text:black

AnalogSourceSink --> AnalogSinkSource       #line:black;line.dotted;text:black : Speaker

@enduml